class Solution:
    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:
        adj = defaultdict(list)
        for src, dst in edges:
            adj[src].append(dst)
        
        def dfs(node):
            if node in path:
                return float("inf")
            if node in vis:
                return 0
            
            vis.add(node)
            path.add(node)

            colorInd = ord(colors[node]) - ord('a')
            count[node][colorInd] = 1
            for ngh in adj[node]:
                if dfs(ngh) == float("inf"):
                    return float("inf")
                for c in range(26):
                    count[node][c] = max(count[node][c], (1 if c == colorInd else 0) + count[ngh][c])
            path.remove(node)
            return max(count[node])

        n, ans = len(colors), 0
        vis, path = set(), set()
        count = [[0] * 26 for i in range(n)]
        for i in range(n):
            ans = max(ans, dfs(i))
        return -1 if ans == float("inf") else ans
