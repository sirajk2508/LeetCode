class LRUCache {
public:
    class node {
        public:
            int key;
            int val;
            node* next;
            node* prev;
            node(int _key, int _val) {
                key = _key;
                val = _val;
            }
    };

    node* head = new node(-1, -1);
    node* tail = new node(-1, -1);
    int cap;
    unordered_map<int, node*> mpp;

    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }

    void addnode(node* newnode) {
        node* temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }

    void deletenode(node* delnode) {
        node* delprev = delnode->prev;
        node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
    }
    
    int get(int key_) {
        if(mpp.find(key_) != mpp.end()) {
            node* ansnode = mpp[key_];
            int ans = ansnode->val;
            mpp.erase(key_);
            deletenode(ansnode);
            addnode(ansnode);
            mpp[key_] = head->next;
            return ans;
        }
        return -1;
    }
    
    void put(int key_, int value) {
        if(mpp.find(key_) != mpp.end()) {
            node* existnode = mpp[key_];
            mpp.erase(key_);
            deletenode(existnode);
        }
        if(mpp.size() == cap) {
            mpp.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new node(key_, value));
        mpp[key_] = head->next;
    }
};






// PYTHON3 Solution

class Node:
    def __init__(self, key, val):
        self.key, self.val = key, val
        self.prev = self.next = None

class LRUCache:

    def __init__(self, capacity: int):
        self.cap = capacity
        self.cache = {} # map key to node(address)

        # Left = LRU, Right = most recent
        self.left, self.right = Node(0, 0), Node(0, 0)
        self.left.next, self.right.prev = self.right, self.left
    
    def deletenode(self, node):
        prv, nxt = node.prev, node.next
        prv.next, nxt.prev = nxt, prv

    def addnode(self, node):
        prv, nxt = self.right.prev, self.right
        prv.next = nxt.prev = node
        node.next, node.prev = nxt, prv
        

    def get(self, key: int) -> int:
        if key in self.cache:
            self.deletenode(self.cache[key])
            self.addnode(self.cache[key])
            return self.cache[key].val
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.deletenode(self.cache[key])
        self.cache[key] = Node(key, value)
        self.addnode(self.cache[key])

        if len(self.cache) > self.cap:
            lru = self.left.next
            self.deletenode(lru)
            del self.cache[lru.key]
