// C++ CODE

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size(), m = word2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, INT_MAX));
        for(int j = 0; j < m+1; j++)
            dp[n][j] = m-j;
        for(int i = 0; i < n+1; i++)
            dp[i][m] = n-i;
        for(int i = n-1; i >= 0; i--) {
            for(int j = m-1; j >= 0; j--) {
                if(word1[i] == word2[j])
                    dp[i][j] = dp[i+1][j+1];
                else {
                    int insert = dp[i+1][j];
                    int del = dp[i][j+1];
                    int replace = dp[i+1][j+1];
                    dp[i][j] = 1 + min(insert, min(del, replace));
                }
            }
        }
        return dp[0][0];
    }
};





// PYTHON3 CODE

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n, m = len(word1), len(word2)
        dp = [[float("inf")] * (m + 1) for i in range(n+1)]

        for j in range(m+1):
            dp[n][j] = m-j
        for i in range(n+1):
            dp[i][m] = n-i
        for i in range(n-1, -1, -1):
            for j in range(m-1, -1, -1):
                if word1[i] == word2[j]:
                    dp[i][j] = dp[i+1][j+1]
                else:
                    dp[i][j] = 1 + min(dp[i+1][j], dp[i][j+1], dp[i+1][j+1])
        return dp[0][0]
