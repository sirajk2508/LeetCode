// GREEDY

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        int last = n-1;
        for(int i = n-1; i >= 0; i--)
            if(nums[i] + i >= last)
                last = i;
        return last == 0;
    }
};



// RECURSIVE

class Solution {
private:
    bool solve(int ind, vector<int>& nums) {
        if(ind == nums.size()-1)
            return true;
        int reachable = nums[ind] + ind;
        for(int i = ind+1; i <= reachable; i++)
            if(solve(i, nums))
                return true;
        return false;
    }
public:
    bool canJump(vector<int>& nums) {
        return solve(0, nums);
    }
};



// MEMOIZATION

class Solution {
private:
    bool solve(int ind, vector<int>& nums, vector<int>& dp) {
        if(ind == nums.size()-1)
            return true;
        int reachable = nums[ind] + ind;
        if(dp[ind] != -1)
            return dp[ind];
        for(int i = ind+1; i <= reachable; i++)
            if(solve(i, nums, dp))
                return dp[ind] = true;
        return dp[ind] = false;
    }
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n+1, -1);
        return solve(0, nums, dp);
    }
};
