Solution 1 : TC - O(N^2)

class Solution {
public:
    int maxDistance(vector<int>& colors) {
        int ans = 0, n = colors.size();
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                if(colors[i] != colors[j])
                    ans = max(ans, abs(j-i));
            }
        }
        return ans;
    }
};





// Solution 2 : TC - O(N + N)

class Solution {
public:
    int maxDistance(vector<int>& colors) {
        int ans = 0, n = colors.size();
        int i = 0, j = n-1;
        while(i < j) {
            if(colors[i] != colors[j]) {
                ans = max(ans, abs(j-i));
                break;
            }
            else j--;
        }
        i = 0, j = n-1;
        while(i < j) {
            if(colors[i] != colors[j]) {
                ans = max(ans, abs(i-j));
                break;
            }
            else i++;
        }
        return ans;
    }
};




// Solution 3 : TC - O(N + N)

class Solution {
public:
    int maxDistance(vector<int>& colors) {
        int n = colors.size(), left = 0, right = n-1;
        while(colors[n-1] == colors[left])
            left++;
        while(colors[0] == colors[right])
            right--;
        return max(right, n - left - 1);
    }
};
