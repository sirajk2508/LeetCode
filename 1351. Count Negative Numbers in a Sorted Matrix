// Solution 1 : TC - O(M x N)

class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int ans = 0, row = grid.size(), col = grid[0].size();
        for(int i = 0; i < row; i++)
            for(int j = 0; j < col; j++)
                if(grid[i][j] < 0)
                    ans++;
        return ans;
    }
};



// Solution 2 : TC - 0(M x N)

class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int ans = 0;
        for(const vector<int>& row : grid)
            for(const int& i : row)
                if(i < 0)
                    ans++;
        return ans;
    }
};



// Solution 3 : TC - O(M x log N)

class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int ans = 0;
        for(const vector<int>& row : grid)
            ans += upper_bound(row.rbegin(), row.rend(), -1) - row.rbegin();
        return ans;
    }
};

// Solution 4 : TC - O(M + N)

class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int ans = 0;
        int m = grid.size(), n = grid[0].size(), r = 0, c = n-1;
        while(r < m) {
            while(c >= 0 && grid[r][c] < 0)
                c--;
            ans += n - c - 1;
            r++;
        }
        return ans;
    }
};
