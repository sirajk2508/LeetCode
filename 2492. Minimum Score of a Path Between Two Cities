// DFS

class Solution {
private:
    void dfs(int i, vector<vector<pair<int, int>>>& adj, vector<int>& vis, int& ans) {
        if(vis[i])
            return;
        vis[i] = 1;
        for(auto& [nei, dist] : adj[i]) {
            ans = min(ans, dist);
            dfs(nei, adj, vis, ans);
        }
    }
public:
    int minScore(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int, int>>> adj(n+1);
        for(auto it : roads){
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        int ans = INT_MAX;
        vector<int> vis(n+1);
        dfs(1, adj, vis, ans);
        return ans;
    }
};


// PYTHON3 CODE

class Solution:
    def minScore(self, n: int, roads: List[List[int]]) -> int:
        adj = defaultdict(list)
        for src, dst, dist in roads:
            adj[src].append((dst, dist))
            adj[dst].append((src, dist))
        def dfs(i):
            if i in vis:
                return
            nonlocal ans
            vis.add(i)
            for nei, dist in adj[i]:
                ans = min(ans, dist)
                dfs(nei)
        ans = float("inf")
        vis = set()
        dfs(1)
        return ans
        
        
        
        
 // BFS
 
 class Solution {
public:
    int minScore(int n, vector<vector<int>>& roads) {
        vector<vector<pair<int, int>>> adj(n+1);
        for(auto it : roads) {
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        int ans = INT_MAX;
        vector<int> vis(n+1, 0);
        queue<int> q;
        q.push(1);
        vis[1] = 1;
        while(!q.empty()) {
            auto node = q.front();
            q.pop();
            vis[node] = 1;
            for(auto& [nei, dist] : adj[node]) {
                if(!vis[nei]) {
                    ans = min(ans, dist);
                    q.push(nei);
                }
            }
        }
        return ans;
    }
};
