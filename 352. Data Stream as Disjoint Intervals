// C++ Solution

class SummaryRanges {
public:
    set<int> numset;
    SummaryRanges() {}
    
    void addNum(int value) {
        numset.insert(value);
    }
    
    vector<vector<int>> getIntervals() {
        vector<int> nums;
        for(auto i : numset)
            nums.push_back(i);
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        int i = 0;
        while(i < nums.size()) {
            int start = nums[i];
            while(i+1 < nums.size() && nums[i]+1 == nums[i+1])
                i++;
            ans.push_back({start, nums[i]});
            i++;
        }
        return ans;
    }
};



// Python3 Code

class SummaryRanges:

    def __init__(self):
        self.range = []
        self.numset = set()

    def addNum(self, value: int) -> None:
        self.numset.add(value)

    def getIntervals(self) -> List[List[int]]:
        nums = sorted(list(self.numset))
        ans = []
        i = 0
        while i < len(nums):
            start = nums[i]
            while i+1 < len(nums) and nums[i]+1 == nums[i+1]:
                i += 1
            ans.append([start, nums[i]])
            i += 1
        return ans
        
        
// Python3 TreeMap solution

from sortedcontainers import SortedDict

class SummaryRanges:

    def __init__(self):
        self.treeMap = SortedDict()

    def addNum(self, value: int) -> None:
        self.treeMap[value] = True

    def getIntervals(self) -> List[List[int]]:
        ans = []
        for n in self.treeMap:
            if ans and ans[-1][1] + 1 == n:
                ans[-1][1] = n
            else:
                ans.append([n, n])
        return ans
