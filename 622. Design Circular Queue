class MyCircularQueue {
private:
    int maxsize, head = 0, tail = -1;
    vector<int> data;
public:
    MyCircularQueue(int k) {
        data.resize(k);
        maxsize = k;
    }
    
    bool enQueue(int value) {
        if(isFull())
            return false;
        tail = (tail+1) % maxsize;
        data[tail] = value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty())
            return false;
        if(head == tail) {
            head = 0;
            tail = -1;
        }
        else head = (head+1) % maxsize;
        return true;
    }
    
    int Front() {
        return isEmpty() ? -1 : data[head];
    }
    
    int Rear() {
        return isEmpty() ? -1 : data[tail];
    }
    
    bool isEmpty() {
        return tail == -1;
    }
    
    bool isFull() {
        return !isEmpty() && (tail + 1) % maxsize == head;
    }
};
