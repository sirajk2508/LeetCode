class Solution {
private:
    vector<vector<int>> adj;

    int dfs(vector<bool>& vis, int node, int d, int prev) {
        int ans = 0, temp;
        for(int& i : adj[node]) {
            if(i != prev) {
                temp = dfs(vis, i, d+1, node);
                if(temp)
                    ans += temp - d;
            }
        }
        return ans || vis[node] ? ans + d : 0;
    }
public:
    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        adj.resize(n);
        for(auto it : edges) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        return dfs(hasApple, 0, 0, -1) * 2;
    }
};
