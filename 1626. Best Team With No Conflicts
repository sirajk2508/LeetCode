// PYTHON3 Recursive Solution

class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        pairs = [[scores[i], ages[i]] for i in range(len(scores))]
        pairs.sort()
        dp = {}

        def dfs(i, j):
            if i == len(pairs):
                return 0
            if (i, j) in dp:
                return dp[(i, j)]
            mscore, mage = pairs[j] if j >= 0 else [0, 0]
            score, age = pairs[i]
            ans = 0
            if not (score > mscore and age < mage):
                ans = dfs(i+1, i) + score
            dp[(i, j)] = max(ans, dfs(i+1, j))
            return dp[(i, j)]
        return dfs(0, -1)
        


// PYTHON3 Memoization Solution

class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        pairs = [[scores[i], ages[i]] for i in range(len(scores))]
        pairs.sort()
        dp = [pairs[i][0] for i in range(len(pairs))]

        for i in range(len(pairs)):
            mscore, mage = pairs[i]
            for j in range(i):
                score, age = pairs[j]
                if mage >= age:
                    dp[i] = max(dp[i], mscore + dp[j])
        return max(dp)
