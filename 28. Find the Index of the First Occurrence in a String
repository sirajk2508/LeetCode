// Brute Force

class Solution {
public:
    int strStr(string haystack, string needle) {
        int n = haystack.size(), m = needle.size();
        for(int i = 0; i <= n-m; i++) {
            int j = 0;
            for(; j < m; j++)
                if(haystack[i+j] != needle[j])
                    break;
            if(j == m)
                return i;
        }
        return -1;
    }
};



class Solution {
public:
    int strStr(string haystack, string needle) {
        int n = haystack.size(), m = needle.size();
        if(m > n)
            return -1;
        for(int i = 0; i <= n-m; i++)
            if(haystack.substr(i, m) == needle)
                return i;
        return -1;
    }
};




// OPTIMAL SOLUTION

class Solution {
public:
    int strStr(string haystack, string needle) {
        int n = haystack.size(), m = needle.size();
        if(m > n)
            return -1;
        int i = 0, j = 0, start = 0;
        while(i < n && j < m) {
            if(haystack[i] == needle[j]) {
                if(i - start + 1 == m)
                    return start;
                j++;
                i++;
            }
            else {
                j = 0;
                start++;
                i = start;
            }
        }
        return -1;
    }
};
