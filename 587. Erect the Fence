class Solution {
private:
    int getRotation(vector<int> a, vector<int> b, vector<int> c) {
        return ((b[0]-a[0]) * (c[1]-a[1])) - ((b[1]-a[1]) * (c[0]-a[0]));
    }
public:
    vector<vector<int>> outerTrees(vector<vector<int>>& trees) {
        if(trees.size() <= 3)
            return trees;
        sort(trees.begin(), trees.end());
        vector<vector<int>> upperHull;
        upperHull.push_back(trees[0]);
        upperHull.push_back(trees[1]);
        for(int i = 2; i < trees.size(); i++) {
            int us = upperHull.size();
            while(upperHull.size() >= 2 && getRotation(upperHull[us-2], upperHull[us-1], trees[i]) > 0) {
                upperHull.pop_back();
                us--;
            }
            upperHull.push_back(trees[i]);
        }
        vector<vector<int>> lowerHull;
        lowerHull.push_back(trees[trees.size()-1]);
        lowerHull.push_back(trees[trees.size()-2]);
        for(int i = trees.size()-3; i >= 0; i--) {
            int ls = lowerHull.size();
            while(lowerHull.size() >= 2 && getRotation(lowerHull[ls-2], lowerHull[ls-1], trees[i]) > 0) {
                lowerHull.pop_back();
                ls--;
            }
            lowerHull.push_back(trees[i]);
        }
        upperHull.insert(upperHull.end(), lowerHull.begin(), lowerHull.end());
        sort(upperHull.begin(), upperHull.end());
        upperHull.erase(unique(upperHull.begin(), upperHull.end()), upperHull.end());
        return upperHull;
    }
};
