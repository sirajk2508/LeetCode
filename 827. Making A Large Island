class DisjointSet {
public:
    vector<int> parent, size;
    DisjointSet(int n) {
        parent.resize(n+1);
        size.resize(n+1, 1);
        for(int i = 0; i <= n; i++)
            parent[i] = i;
    }

    int findParent(int node) {
        if(node == parent[node])
            return node;
        return parent[node] = findParent(parent[node]);
    }

    void unionBySize(int u, int v) {
        int pu = findParent(u);
        int pv = findParent(v);
        if(pu == pv)
            return;
        if(size[pu] < size[pv]) {
            parent[pu] = pv;
            size[pv] += size[pu];
        }
        else {
            parent[pv] = pu;
            size[pu] += size[pv];
        }
    }
};

class Solution {
private:
    bool isValid(int nrow, int ncol, int n) {
        return nrow >= 0 && nrow < n && ncol >= 0 && ncol < n;
    }
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        DisjointSet ds(n * n);
        for(int row = 0; row < n; row++) {
            for(int col = 0; col < n; col++) {
                if(grid[row][col] == 0)
                    continue;
                int dx[] = {-1, 0, +1, 0};
                int dy[] = {0, +1, 0, -1};
                for(int ind = 0; ind < 4; ind++) {
                    int nrow = row + dx[ind];
                    int ncol = col + dy[ind];
                    if(isValid(nrow, ncol, n) && grid[nrow][ncol] == 1) {
                        int nodeNo = row*n + col;
                        int adjnodeNo = nrow * n + ncol;
                        ds.unionBySize(nodeNo, adjnodeNo);
                    }
                }
            }
        }
        int ans = 0;
        for(int row = 0; row < n; row++) {
            for(int col = 0; col < n; col++) {
                if(grid[row][col] == 1)
                    continue;
                int dx[] = {-1, 0, +1, 0};
                int dy[] = {0, +1, 0, -1};
                set<int> components;
                for(int ind = 0; ind < 4; ind++) {
                    int nrow = row + dx[ind];
                    int ncol = col + dy[ind];
                    if(isValid(nrow, ncol, n)) {
                        if(grid[nrow][ncol] == 1)
                            components.insert(ds.findParent(nrow*n+ncol));
                    }
                }
                int sizeTotal = 0;
                for(auto it : components)
                    sizeTotal += ds.size[it];
                ans = max(ans, sizeTotal + 1);
            }
        }
        for(int i = 0; i < n*n; i++)
            ans = max(ans, ds.size[ds.findParent(i)]);
        return ans;
    }
};
