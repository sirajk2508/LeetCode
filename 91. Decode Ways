// MEMOIZATION

class Solution {
private:
    int dp(int i, string& s, int* memo) {
        if(i == s.size())
            return 1;
        if(memo[i] != -1)
            return memo[i];
        int ans = 0;
        int op1 = s[i]-'0', op2 = 0;
        if(i < s.size()-1)
            op2 = op1 * 10 + s[i+1]-'0';
        if(op1 > 0)
            ans += dp(i+1, s, memo);
        if(op1 > 0 && op2 > 0 && op2 <= 26)
            ans += dp(i+2, s, memo);
        return memo[i] = ans;
    }
public:
    int numDecodings(string s) {
        int memo[102];
        memset(memo, -1, sizeof memo);
        return dp(0, s, memo);
    }
};




// TABULATION

class Solution {
public:
    int numDecodings(string s) {
        int dp[102];
        memset(dp, 0, sizeof dp);
        int n = s.size();
        dp[n+1] = 1;
        dp[n] = 1;
        for(int i = n-1; i >= 0; i--) {
            int op1 = s[i] - '0', op2 = 0;
            if(i < n-1)
                op2 = op1 * 10 + s[i+1] - '0';
            if(op1 > 0)
                dp[i] += dp[i+1];
            if(op1 > 0 && op2 > 0 && op2 <= 26)
                dp[i] += dp[i+2];
        }
        return dp[0];
    }
};
