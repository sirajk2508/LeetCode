// BFS SOLUTION

class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<vector<int>> graph(n);
        for(int i = 0; i < edges.size(); i++) {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        vector<bool> vis(n, 0);
        queue<int> q;
        q.push(source);
        vis[source] = 1;
        while(!q.empty()) {
            int top = q.front();
            q.pop();
            if(top == destination)
                return true;
            for(int i = 0; i < graph[top].size(); i++) {
                if(!vis[graph[top][i]]) {
                    vis[graph[top][i]] = 1;
                    q.push(graph[top][i]);
                }
            }
        }
        return false;
    }
};




// DFS SOLUTION

class Solution {
private:
    bool dfs(vector<vector<int>>& adj, vector<bool>& vis, int cur, int end) {
        if(cur == end)
            return true;
        if(vis[cur])
            return false;
        vis[cur] = true;
        for(int i = 0; i < adj[cur].size(); i++)
            if(dfs(adj, vis, adj[cur][i], end))
                return true;
        return false;
    }
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<vector<int>> adj(n);
        for(int i = 0; i < edges.size(); i++) {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        vector<bool> vis(n, 0);
        return dfs(adj, vis, source, destination);
    }
};
