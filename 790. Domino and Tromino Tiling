// RECURSION

class Solution {
private:
    const int MOD = 1e9+7;

    long solve(int i, int n, bool prev) {
        if(i > n)
            return 0;
        if(i == n)
            return !prev;
        if(prev)    
            return (solve(i+1, n, false) + solve(i+1, n, true)) % MOD;
        return (solve(i+1, n, false) + solve(i+2, n, false) + 2l * solve(i+2, n, true)) % MOD;
    }
public:
    int numTilings(int n) {
        return solve(0, n, false);
    }
};


// MEMOIZATION

class Solution {
private:
    const int MOD = 1e9+7;
    int dp[1001][2]{};

    long solve(int i, int n, bool prev) {
        if(i > n)
            return 0;
        if(i == n)
            return !prev;
        if(dp[i][prev])
            return dp[i][prev];
        if(prev)    
            return dp[i][prev] = (solve(i+1, n, false) + solve(i+1, n, true)) % MOD;
        return dp[i][prev] = (solve(i+1, n, false) + solve(i+2, n, false) + 2l * solve(i+2, n, true)) % MOD;
    }
public:
    int numTilings(int n) {
        return solve(0, n, false);
    }
};


// TABULATION

class Solution {
public:
    const int MOD = 1e9+7;
    int numTilings(int n) {
        vector<vector<int>> dp(n+2, vector<int>(2, 0));
        dp[1] = {1, 1}, dp[2] = {2, 2};
        for(int i = 3; i <= n; i++) {
            dp[i][0] = (dp[i-1][0] + dp[i-2][0] + 2l * dp[i-2][1]) % MOD;
            dp[i][1] = (dp[i-1][0] + dp[i-1][1]) % MOD;
        }
        return dp[n][0];
    }
};
