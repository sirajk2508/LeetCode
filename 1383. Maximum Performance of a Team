// Priority Queue Solutions

class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> container(n);
        for(int i = 0; i < n; i++)
            container[i] = {efficiency[i], speed[i]};
        priority_queue<int, vector<int>, greater<int>> pq;
        long sum = 0, ans = 0;
        sort(container.begin(), container.end());
        for(int i = n-1; i >= 0; i--) {
            sum += container[i].second;
            pq.push(container[i].second);
            if(pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            ans = max(ans, sum * container[i].first);
        }
        return int(ans % 1000000007);
    }
};



class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> container(n);
        for(int i = 0; i < n; i++)
            container[i] = {efficiency[i], speed[i]};
        priority_queue<int, vector<int>, greater<int>> pq;
        long sum = 0, ans = 0;
        sort(container.rbegin(), container.rend());
        for(int i = 0; i < n; i++) {
            sum += container[i].second;
            pq.push(container[i].second);
            if(pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            ans = max(ans, sum * container[i].first);
        }
        return int(ans % 1000000007);
    }
};




class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> v(n);
        for(int i = 0; i < n; i++)
            v[i] = {efficiency[i], speed[i]};
        long sum = 0, ans = 0;
        sort(rbegin(v), rend(v));
        priority_queue<int, vector<int>, greater<int>> pq;
        for(auto& [e, s] : v) {
            pq.push(s);
            sum += s;
            if(pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            ans = max(ans, sum * e);
        }
        return ans % int(1e9+7);
    }
};
