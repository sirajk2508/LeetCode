// BFS Solution by creating adjacency list

class Solution {
private:
    void bfs(int start, vector<int> adj[], vector<bool>& visited) {
        queue<int> q;
        q.push(start);
        visited[start] = true;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            for(auto it : adj[node]) {
                if(!visited[it]) {
                    visited[it] = true;
                    q.push(it);
                }
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> adj[n];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        vector<bool> visited(n, 0);
        int count = 0;
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                count++;
                bfs(i, adj, visited);
            }
        }
        return count;
    }
};





// DFS Solution using Adjacency Matrix

class Solution {
private:
    void dfs(int start, vector<int> adj[], vector<bool>& visited) {
        visited[start] = true;
        for(auto it : adj[start])
            if(!visited[it])
                dfs(it, adj, visited);
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> adj[n];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int count = 0;
        vector<bool> visited(n, 0);
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                count++;
                dfs(i, adj, visited);
            }
        }
        return count;
    }
};
