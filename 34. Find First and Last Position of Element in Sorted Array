class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = -1, last = -1;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            if(nums[i] == target) {
                first = i;
                break;
            }
        }
        for(int i = n-1; i >= 0; i--) {
            if(nums[i] == target) {
                last = i;
                break;
            }
        }
        return {first, last};
    }
};



// BINARY SEARCH

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0, r = n-1;
        int first = -1, last = -1;
        while(l <= r) {
            int mid = l + (r - l) / 2;
            if(nums[mid] < target)
                l = mid + 1;
            else if(nums[mid] > target)
                r = mid - 1;
            else {
                if(mid == l || nums[mid] != nums[mid-1]) {
                    first = mid;
                    break;
                }
                else {
                    r = mid - 1;
                    first = mid - 1;
                }
            }
        }
        l = 0, r = n-1;
        while(l <= r) {
            int mid = l + (r - l) / 2;
            if(nums[mid] < target)
                l = mid + 1;
            else if(nums[mid] > target)
                r = mid - 1;
            else {
                if(mid == r || nums[mid] != nums[mid + 1]) {
                    last = mid;
                    break;
                }
                else {
                    l = mid + 1;
                    last = mid + 1;
                }
            }
        }
        return {first, last};
    }
};
