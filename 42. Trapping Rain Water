// Solution 1 : TC - O(N)     SC - O(N + N)

class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size(), ans = 0, water = 0;
        vector<int> left(n), right(n);
        for(int i = 1; i < n; i++)
            left[i] = max(height[i-1], left[i-1]);
        for(int i = n-2; i >= 0; i--)
            right[i] = max(height[i+1], right[i+1]);
        for(int i = 0; i < n; i++) {
            water = min(left[i], right[i]);
            if(water >= height[i])
                ans += water - height[i];
        }
        return ans;
    }
};





// Solution 2 : TC - O(N)     SC - O(1)

class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size(), left =0, right =n-1, maxleft =0, maxright =0, ans = 0;
        while(left <= right) {
            if(height[left] <= height[right]) {
                if(height[left] >= maxleft)
                    maxleft = height[left];
                else ans += maxleft - height[left];
                left++;
            }
            else {
                if(height[right] >= maxright)
                    maxright = height[right];
                else ans += maxright - height[right];
                right--;
            }
        }
        return ans;
    }
};
