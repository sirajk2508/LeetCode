class Solution {
private:
    queue<pair<int, int>> q;
    
    void dfs(vector<vector<int>>& grid, int i, int j, int n, int m) {
        if(i < 0 || i >= n || j < 0 || j >= m || grid[i][j] == 2 || grid[i][j] == 0)
            return;
        grid[i][j] = 2;
        q.push({i, j});
        dfs(grid, i+1, j, n, m);
        dfs(grid, i-1, j, n, m);
        dfs(grid, i, j+1, n, m);
        dfs(grid, i, j-1, n, m);
    }

    int bfs(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        int dis = 0, mindis = INT_MAX;
        int dx[] = {-1, 0, +1, 0};
        int dy[] = {0, +1, 0, -1};
        while(!q.empty()) {
            int a = q.size();
            while(a-- > 0) {
                auto it = q.front();
                q.pop();
                for(int i = 0; i < 4; i++) {
                    int x = it.first + dx[i];
                    int y = it.second + dy[i];
                    if(x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 1)
                        mindis = min(mindis, dis);
                    else if(x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 0) {
                        q.push({x, y});
                        grid[x][y] = 2;
                    }
                }
            }
            dis++;
        }
        return mindis;
    }
public:
    int shortestBridge(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        bool flag = false;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[i][j] == 1 && !flag) {
                    dfs(grid, i, j, n, m);
                    q.push({i, j});
                    flag = true;
                    break;
                }
            }
            if(flag)
                break;
        }
        return bfs(grid);
    }
};
