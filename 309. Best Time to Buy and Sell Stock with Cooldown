// RECURSIVE

class Solution {
private:
    int solve(int ind, int buy, vector<int>& prices) {
        int n = prices.size();
        if(ind >= n)
            return 0;
        int profit = 0;
        if(buy == 1)
            profit = max(-prices[ind] + solve(ind+1, 0, prices), solve(ind+1,1,prices));
        else 
            profit = max(prices[ind] + solve(ind+2, 1, prices), solve(ind+1, 0, prices));
        return profit;
    }
public:
    int maxProfit(vector<int>& prices) {
        return solve(0, 1, prices);
    }
};



// MEMOIZATION

class Solution {
private:
    int solve(int ind, int buy, vector<int>& prices, vector<vector<int>>& dp) {
        int n = prices.size();
        if(ind >= n)
            return 0;
        if(dp[ind][buy] != -1)
            return dp[ind][buy];
        int profit = 0;
        if(buy == 1)
            profit = max(-prices[ind] + solve(ind+1, 0, prices, dp), solve(ind+1,1,prices, dp));
        else 
            profit = max(prices[ind] + solve(ind+2, 1, prices, dp), solve(ind+1, 0, prices, dp));
        return dp[ind][buy] = profit;
    }
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2, -1));
        return solve(0, 1, prices, dp);
    }
};



// TABULATION

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+2, vector<int>(2, 0));
        for(int ind = n-1; ind >= 0; ind--) {
            for(int buy = 0; buy <= 1; buy++) {
                int profit = 0;
                if(buy == 1)
                    profit = max(-prices[ind] + dp[ind+1][0], dp[ind+1][1]);
                else profit = max(prices[ind] + dp[ind+2][1], dp[ind+1][0]);
                dp[ind][buy] = profit;
            }
        }
        return dp[0][1];
    }
};
