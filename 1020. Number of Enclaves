// BFS Solution

class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        queue<pair<int, int>> q;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(i == 0 || j == 0 || i == n-1 || j == m-1) {
                    if(grid[i][j] == 1) {
                        q.push({i, j});
                        vis[i][j] = 1;
                    }
                }
            }
        }
        int delrow[] = {-1, 0, +1, 0};
        int delcol[] = {0, +1, 0, -1};
        while(!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            for(int i = 0; i < 4; i++) {
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                if(nrow >= 0 && ncol >= 0 && nrow < n && ncol < m && !vis[nrow][ncol] && grid[nrow][ncol] == 1) {
                    q.push({nrow, ncol});
                    vis[nrow][ncol] = 1;
                }
            }
        }
        int count = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(!vis[i][j] && grid[i][j] == 1)
                    count++;
        return count;
    }
};





// DFS Solution

class Solution {
private:
    int delrow[4] = {-1, 0, +1, 0};
    int delcol[4] = {0, +1, 0, -1};
    
    void dfs(int row, int col, vector<vector<int>>& vis, vector<vector<int>>& grid) {
        vis[row][col] = 1;
        int n = grid.size();
        int m = grid[0].size();
        for(int i = 0; i < 4; i++) {
            int r = row + delrow[i];
            int c = col + delcol[i];
            if(r >= 0 && c >= 0 && r < n && c < m && grid[r][c] == 1 && !vis[r][c])
                dfs(r, c, vis, grid);
        }
    }
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(i == 0 || j == 0 || i == n-1 || j == m-1) {
                    if(grid[i][j] == 1)
                        dfs(i, j, vis, grid);
                }
            }
        }
        int count = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++)
                if(!vis[i][j] && grid[i][j] == 1)
                    count++;
        }
        return count;
    }
};
