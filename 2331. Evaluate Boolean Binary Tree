// Recursive Solution

class Solution {
public:
    bool evaluateTree(TreeNode* root) {
        if(!root->left && !root->right)
            return root->val;
        int l = evaluateTree(root->left);
        int r = evaluateTree(root->right);
        return (root->val == 2) ? l or r : l and r;
    }
};




// DFS Solution

class Solution {
public:
    bool evaluateTree(TreeNode* root) {
        if(root->val < 2)
            return root->val;
        if(root->val == 2)
            return evaluateTree(root->left) || evaluateTree(root->right);
        return evaluateTree(root->left) && evaluateTree(root->right);
    }
};





// Switch Solution

class Solution {
public:
    bool evaluateTree(TreeNode* root) {
        switch(root->val) {
            case 0:
            case 1:
                return root->val;
            case 2:
                return (evaluateTree(root->left) || evaluateTree(root->right));
            default:
                return (evaluateTree(root->left) && evaluateTree(root->right));
        }
    }
};
