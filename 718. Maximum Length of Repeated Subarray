// Dynamic Programming - Tabulation

class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int ans = 0, n = nums1.size(), m = nums2.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= m; j++) {
                if(nums1[i-1] == nums2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                ans = max(ans, dp[i][j]);
            }
        }
        return ans;
    }
};



// Space Optimized

class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        if(m < n) 
            return findLength(nums2, nums1);
        vector<int> dp(n+1, 0), prev(n+1, 0);
        int ans = 0;
        for(int i = 1; i <= m; ++i) {
            for(int j = 1; j <= n; ++j) {
                if(nums1[i-1] == nums2[j-1])
                    dp[j] = 1 + prev[j-1];
                else dp[j] = 0;
                ans = max(ans, dp[j]);
            }
            dp.swap(prev);
        }
        return ans;
    }
};
