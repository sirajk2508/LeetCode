// RECURSIVE SOLUTUION

class Solution {
private:
    bool solve(string s, string t) {
        if(s.size() == 1)
            return s == t;
        if(s == t)
            return true;
        int n = s.size();
        for(int i = 1; i < n; i++) 
            if((solve(s.substr(0, i), t.substr(0, i)) && (solve(s.substr(i), t.substr(i))) || (solve(s.substr(0, i), t.substr(n-i)) && (solve(s.substr(i), t.substr(0, n-i))))))
            return true;
        return false;
    }
public:
    bool isScramble(string s1, string s2) {
        return solve(s1, s2);
    }
};



// MEMOIZATION

class Solution {
private:
    unordered_map<string, bool> mpp;
    bool solve(string s, string t) {
        if(s.size() == 1)
            return s == t;
        if(s == t)
            return true;
        string key = s + t;
        if(mpp.find(key) != mpp.end())
            return mpp[key];
        int n = s.size();
        for(int i = 1; i < n; i++) 
            if((solve(s.substr(0, i), t.substr(0, i)) && (solve(s.substr(i), t.substr(i))) ||              (solve(s.substr(0, i), t.substr(n-i)) && (solve(s.substr(i), t.substr(0, n-i))))))
            return mpp[key] = true;
        return mpp[key] = false;
    }
public:
    bool isScramble(string s1, string s2) {
        return solve(s1, s2);
    }
};
