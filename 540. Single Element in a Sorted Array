class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        unordered_map<int, int> mpp;
        for(auto it : nums)
            mpp[it]++;
        for(auto it : mpp)
            if(it.second == 1)
                return it.first;
        return -1;
    }
};




// Optimized Solution

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        int low = 0, high = n-2;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] == nums[mid ^ 1])
                low = mid + 1;
            else high = mid - 1;
        }
        return nums[low];
    }
};
