// RECURSION

class Solution {
private:
    #define mod 1000000007
    int solve(string& s, int i, int k) {
        if(i == s.size())
            return 1;
        else {
            if(s[i] == '0')
                return 0;
            long long num = 0;
            int ans = 0;
            for(int j = i; j < s.size(); j++) {
                num = num * 10 + (s[j]-'0');
                if(num > k)
                    break;
                ans += solve(s, j+1, k);
                ans = ans % mod;
            }
            return ans;
        }
    }
public:
    int numberOfArrays(string s, int k) {
        return solve(s, 0, k);
    }
};



// MEMOIZATION

class Solution {
private:
    #define mod 1000000007
    int dp[100001];

    int solve(string& s, int i, int k) {
        if(i == s.size())
            return 1;
        if(dp[i] != -1)
            return dp[i];
        else {
            if(s[i] == '0')
                return 0;
            long long num = 0;
            int ans = 0;
            for(int j = i; j < s.size(); j++) {
                num = num * 10 + (s[j] - '0');
                if(num > k)
                    break;
                ans += solve(s, j+1, k);
                ans = ans % mod;
            }
            return dp[i] = ans;
        }
    }
public:
    int numberOfArrays(string s, int k) {
        for(int i = 0; i < 100001; i++)
            dp[i] = -1;
        return solve(s, 0, k);
    }
};
