class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        int n = profits.size();
        vector<pair<int, int>> projects(n);
        for(int i = 0; i < n; i++)
            projects[i] = {capital[i], profits[i]};
        sort(projects.begin(), projects.end());
        int i = 0;
        priority_queue<int> pq;
        while(k--) {
            while(i < n && projects[i].first <= w) {
                pq.push(projects[i].second);
                i++;
            }
            if(!pq.empty()) {
                w += pq.top();
                pq.pop();
            }
        }
        return w;
    }
};




// PYTHON3 CODE

class Solution:
    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:
        maxprofit = []
        mincapital = [(c, p) for c, p  in zip(capital, profits)]
        heapq.heapify(mincapital)

        for i in range(k):
            while mincapital and mincapital[0][0] <= w:
                c, p = heapq.heappop(mincapital)
                heapq.heappush(maxprofit, -1 * p)
            if not maxprofit:
                break
            w -= heapq.heappop(maxprofit)
        return w
