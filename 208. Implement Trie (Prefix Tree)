class Trie {
    struct Trienode {
        char val;
        int count;
        int endshere;
        Trienode* child[26];
    };
    Trienode* root;

    Trienode* getnode(int idx) {
        Trienode* newnode = new Trienode;
        newnode->val = 'a'+idx;
        newnode->count = newnode->endshere = 0;
        for(int i = 0; i < 26; i++)
            newnode->child[i] = NULL;
        return newnode;
    }
public:
    Trie() {
        root = getnode('/'-'a');
    }
    
    void insert(string word) {
        Trienode* cur = root;
        int index;
        for(int i = 0; word[i] != '\0'; i++) {
            index = word[i]-'a';
            if(cur->child[index] == NULL)
                cur->child[index] = getnode(index);
            cur->child[index]->count += 1;
            cur = cur->child[index];
        }
        cur->endshere += 1;
    }
    
    bool search(string word) {
        Trienode* cur = root;
        int index;
        for(int i = 0; word[i] != '\0'; i++) {
            index = word[i]-'a';
            if(cur->child[index] == NULL)
                return false;
            cur = cur->child[index];
        }
        return (cur->endshere > 0);
    }
    
    bool startsWith(string prefix) {
        Trienode* cur = root;
        int index;
        for(int i = 0; prefix[i] != '\0'; i++) {
            index = prefix[i] - 'a';
            if(cur->child[index] == NULL)
                return false;
            cur = cur->child[index];
        }
        return (cur->count > 0);
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
