// C++ CODE


// RECURSION
class Solution {
private:
    int solve(int i, int total, vector<int>& stones, int sum, int target) {
        if(total >= target || i == stones.size())
            return abs(total - (sum - total));
        return min(solve(i+1, total, stones, sum, target), solve(i+1, total + stones[i], stones, sum, target));
    }
public:
    int lastStoneWeightII(vector<int>& stones) {
        int stonesum = 0;
        for(auto i : stones)
            stonesum += i;
        int target = ceil(stonesum / 2);
        return solve(0, 0, stones, stonesum, target);
    }
};

// MEMOIZATION
class Solution {
private:
    int solve(int i, int total, vector<int>& stones, int sum, int target, vector<vector<int>>& dp) {
        if(total >= target || i == stones.size())
            return abs(total - (sum - total));
        if(dp[i][total] != -1)
            return dp[i][total];
        dp[i][total] = min(solve(i+1, total, stones, sum, target, dp), solve(i+1, total + stones[i], stones, sum, target, dp));
        return dp[i][total];
    }
public:
    int lastStoneWeightII(vector<int>& stones) {
        int stonesum = 0;
        int n = stones.size();
        for(auto i : stones)
            stonesum += i;
        int target = ceil(stonesum / 2);
        vector<vector<int>> dp(n+1, vector<int>(target + 1, -1));
        return solve(0, 0, stones, stonesum, target, dp);
    }
};


// PYTHON3 CODE

class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        stoneSum = sum(stones)
        target = ceil(stoneSum / 2)

        def solve(i, total):
            if total >= target or i == len(stones):
                return abs(total - (stoneSum - total))
            if (i, total) in dp:
                return dp[(i, total)]
            dp[(i, total)] = min(solve(i+1, total), solve(i+1, total + stones[i]))
            return dp[(i, total)]
        dp = {}
        return solve(0, 0)
