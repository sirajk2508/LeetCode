// C++ Solution

class Solution {
public:
    long long distinctNames(vector<string>& ideas) {
        unordered_map<char, unordered_set<string>> mpp;
        for(auto w : ideas)
            mpp[w[0]].insert(w.substr(1));
        long long ans = 0;
        for(auto char1 : mpp) {
            for(auto char2 : mpp) {
                if(char1.first == char2.first)
                    continue;
                int intersect = 0;
                for(string w : char1.second) {
                    if(char2.second.find(w) != char2.second.end())
                        intersect++;
                }
                int distinct1 = char1.second.size() - intersect;
                int distinct2 = char2.second.size() - intersect;
                ans += distinct1 * distinct2;
            }
        }
        return ans;
    }
};




// PYTHON3 Solution

class Solution:
    def distinctNames(self, ideas: List[str]) -> int:
        wordmap = collections.defaultdict(set)
        for w in ideas:
            wordmap[w[0]].add(w[1:])
        ans = 0
        for char1 in wordmap:
            for char2 in wordmap:
                if char1 == char2:
                    continue
                intersect = 0
                for w in wordmap[char1]:
                    if w in wordmap[char2]:
                        intersect += 1
                distinct1 = len(wordmap[char1]) - intersect
                distinct2 = len(wordmap[char2]) - intersect
                ans += distinct1 * distinct2
        return ans
