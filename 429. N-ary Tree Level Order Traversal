// BFS Level Order Traversal

class Solution {
private:
    void solve(Node* root, vector<vector<int>>& ans) {
        if(!root) return;
        queue<Node*> q;
        q.push(root);
        while(!q.empty()) {
            vector<int> level;
            int n = q.size();
            for(int i = 0; i < n; i++) {
                Node* cur = q.front();
                q.pop();
                level.push_back(cur->val);
                for(Node* child : cur->children)
                    q.push(child);
            }
            ans.push_back(level);
        }
    }
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> ans;
        solve(root, ans);
        return ans;
    }
};




// Using DFS

class Solution {
private:
    vector<vector<int>> ans;
    
    void solve(Node* root, int level) {
        if(!root)
            return;
        if(level == ans.size())
            ans.emplace_back();
        ans[level].push_back(root->val);
        for(Node* child : root->children)
            solve(child, level + 1);
    }
public:
    vector<vector<int>> levelOrder(Node* root) {
        solve(root, 0);
        return ans;
    }
};
