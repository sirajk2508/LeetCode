// Solution 1

class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        vector<unordered_set<int>> graph(n+1, unordered_set<int>());
        for(auto& edge : trust) {
            int a = edge[0], b = edge[1];
            graph[a].insert(b);
        }
        for(int cand = 1; cand <= n; cand++) {
           if(graph[cand].size() == 0) {
                bool isGood = true;
                for(int other = 1; other <= n; other++) {
                    if(other == cand)
                        continue;
                    if(graph[other].count(cand) == 0) {
                        isGood = false;
                        break;
                    }
                }
                if(isGood)
                    return cand;
           }
        }
        return -1;
    }
};


// Solution 2

class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        vector<unordered_set<int>> graph(n+1, unordered_set<int>());
        for(auto& edge : trust) {
            int a = edge[0], b = edge[1];
            graph[a].insert(b);
        }
        int townjudge = -1;
        for(int i = 1; i <= n; i++) {
            if(graph[i].size() == 0) {
                townjudge = i;
                break;
            }
        }
        if(townjudge == -1)
            return -1;
        for(int i = 1; i <= n; i++) {
            if(i == townjudge)
                continue;
            if(graph[i].count(townjudge) == 0)
                return -1;
        }
        return townjudge;
    }
};


// Optimized solution

class Solution {
public:
    int findJudge(int n, vector<vector<int>>& trust) {
        vector<int> degree(n+1);
        for(auto& edge : trust) {
            int a = edge[0], b = edge[1];
            degree[a]--;
            degree[b]++;
        }
        for(int i = 1; i <= n; i++)
            if(degree[i] == n-1)
                return i;
        return -1;
    }
};
