// MEMOIZATION

class Solution {
private:
    #define MOD 1000000007
    int solve(int n, int k, int target, vector<vector<int>>& dp) {
        if(n == 0 && target == 0)
            return 1;
        if(n <= 0 || target <= 0)
            return 0;
        if(dp[n][target] != -1)
            return dp[n][target];
        int sum = 0;
        for(int i = 1; i <= k; i++)
            sum = (sum % MOD + solve(n-1, k, target-i, dp) % MOD) % MOD;
        return dp[n][target] = sum;
            
    }
public:
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>> dp(n+1, vector<int>(target+1, -1));
        return solve(n, k, target, dp);
    }
};




// TABULATION

class Solution {
public:
    int numRollsToTarget(int n, int k, int target) {
        int MOD = 1e9+7;
        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <= target; j++)
                for(int m = 1; m <= k; m++)
                    if(m <= j)
                        dp[i][j] = ((dp[i][j]%MOD) + (dp[i-1][j-m] % MOD)) % MOD;
        }
        return dp[n][target];
    }
};
