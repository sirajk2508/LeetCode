// RECURSIVE SOLUTION

class Solution {
private:
    void dfs(TreeNode* root, vector<int>& v) {
        if(!root)
            return;
        if(!(root->left || root->right))
            v.push_back(root->val);
        dfs(root->left, v);
        dfs(root->right, v);
    }
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> v1{}, v2{};
        dfs(root1, v1);
        dfs(root2, v2);
        return v1 == v2; 
    }
};


// ITERATIVE SOLUTION

class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        if(root1 == root2)
            return true;
        if(!root1 || !root2)
            return false;
        stack<TreeNode*> s1;
        s1.push(root1);
        stack<TreeNode*> s2;
        s2.push(root2);
        while(!s1.empty() && !s2.empty()) {
            auto node1 = s1.top();
            s1.pop();
            while(node1->left || node1->right) {
                if(node1->left) {
                    if(node1->right)
                        s1.push(node1->right);
                    node1 = node1->left;
                }
                else node1 = node1->right;
            }
            auto node2 = s2.top();
            s2.pop();
            while(node2->left || node2->right) {
                if(node2->left) {
                    if(node2->right)
                        s2.push(node2->right);
                    node2 = node2->left;
                }
                else node2 = node2->right;
            }
            if(node1->val != node2->val)
                return false;
        }
        return s1.empty() && s2.empty();
    }
};
