// PYTHON3 CODE

class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        f = [0] + flowerbed + [0]
        for i in range(1, len(f)-1):
            if f[i-1] == 0 and f[i] == 0 and f[i+1] == 0:
                f[i] = 1
                n -= 1
        return n <= 0
        
        
        
// C++ CODE

class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        vector<int> f;
        f.push_back(0);
        for(int i = 0; i < flowerbed.size(); i++)
            f.push_back(flowerbed[i]);
        f.push_back(0);
        for(int i = 1; i < f.size()-1; i++) {
            if(f[i-1] == 0 && f[i] == 0 && f[i+1] == 0) {
                f[i] = 1;
                n--;
            }
        }
        return n <= 0;
    }
};

// NO EXTRA SPACE

class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int empty;
        if(flowerbed[0] == 1)
            empty = 0;
        else empty = 1;
        for(auto f : flowerbed) {
            if(f) {
                n -= int((empty-1) / 2);
                empty = 0;
            }
            else empty++;
        }
        n -= (empty) / 2;
        return n <= 0;
    }
};
