// Brute Force Approach

class Solution {
public:
    bool canBeEqual(vector<int>& target, vector<int>& arr) {
        sort(target.begin(), target.end());
        sort(arr.begin(), arr.end());
        if(target == arr)
            return true;
        else return false;
    }
};


// Using multiset

class Solution {
public:
    bool canBeEqual(vector<int>& target, vector<int>& arr) {
        return unordered_multiset<int>(begin(target), end(target)) == unordered_multiset<int>(begin(arr), end(arr));
    }
};



// Time Complexity: O(n) and Space Complexity: O(1)

class Solution {
public:
    bool canBeEqual(vector<int>& target, vector<int>& arr) {
        int count[1001] = {0};
        for(int i = 0; i < target.size(); i++) {
            count[target[i]]++;
            count[arr[i]]--;
        }
        for(int i = 0; i < 1001; i++)
            if(count[i] != 0)
                return false;
        return true;
    }
};
