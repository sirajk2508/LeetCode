// PYTHON3 Code

class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        length = len(board)
        board.reverse()
        def inToPos(square):
            r = (square - 1) // length
            c = (square - 1) % length
            if r % 2:
                c = length - 1 - c
            return [r, c]
        
        q = deque()
        q.append([1, 0]) # [square, moves]
        visit = set()
        while q:
            square, moves = q.popleft()
            for i in range(1, 7):
                nextSquare = square + i
                r, c = inToPos(nextSquare)
                if board[r][c] != -1:
                    nextSquare = board[r][c]
                if nextSquare == length * length:
                    return moves + 1
                if nextSquare not in visit:
                    visit.add(nextSquare)
                    q.append([nextSquare, moves + 1])
        return -1
        
        
        
        
// C ++ BFS 

class Solution {
private:
    pair<int, int> inToPos(int square, int length) {
        int r = (square - 1) / length;
        int c = (square - 1) % length;
        if(r % 2)
            c = length - 1 - c;
        return {r, c};
    }
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int length = board.size();
        reverse(board.begin(), board.end());
        queue<pair<int, int>> q;
        q.push({1, 0}); // square, moves
        set<int> visit;
        while(!q.empty()) {
            int square = q.front().first;
            int moves = q.front().second;
            q.pop();
            for(int i = 1; i < 7; i++) {
                int nextSquare = square + i;
                pair<int, int> pos = inToPos(nextSquare, length);
                int row = pos.first;
                int col = pos.second;
                if(board[row][col] != -1)
                    nextSquare = board[row][col];
                if(nextSquare == length * length)
                    return moves + 1;
                if(visit.find(nextSquare) == visit.end()) {
                    visit.insert(nextSquare);
                    q.push({nextSquare, moves+1});
                }
            }
        }
        return -1;
    }
};
