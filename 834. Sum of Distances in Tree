class Solution {
private:
    vector<unordered_set<int>> tree;
    vector<int> ans, count;

    void dfs(int root, int pre) {
        for(auto i : tree[root]) {
            if(i == pre)
                continue;
            dfs(i, root);
            count[root] += count[i];
            ans[root] += count[i] + ans[i];
        }
    }

    void dfs2(int root, int pre) {
        for(auto i : tree[root]) {
            if(i == pre)
                continue;
            ans[i] = ans[root] - count[i] + count.size() - count[i];
            dfs2(i, root);
        }
    }
public:
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        tree.resize(n);
        ans.resize(n, 0);
        count.resize(n, 1);
        for(auto it : edges) {
            tree[it[0]].insert(it[1]);
            tree[it[1]].insert(it[0]);
        }
        dfs(0, -1);
        dfs2(0, -1);
        return ans;
    }
};
