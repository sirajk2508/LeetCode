// TIME LIMIT EXCEEDED

class Solution {
private:
    int maxInArray(vector<int>& nums) {
        int maxi = 0;
        for(int i = 0; i < nums.size(); i++)
            maxi = max(maxi, nums[i]);
        return maxi;
    }
    int minInArray(vector<int>& nums) {
        int mini = INT_MAX;
        for(int i = 0; i < nums.size(); i++)
            mini = min(mini, nums[i]);
        return mini;
    }
    vector<int> slicing(vector<int>& arr, int X, int Y) {
        auto start = arr.begin() + X;
        auto end = arr.begin() + Y + 1;
        vector<int> result(Y - X + 1);
        copy(start, end, result.begin());
        return result;
    }
public:
    long long countSubarrays(vector<int>& nums, int minK, int maxK) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = i; j < n; j++) {
                vector<int> temp = slicing(nums, i, j);
                if(maxInArray(temp) == maxK && minInArray(temp) == minK)
                    ans++;
            }
        }
        return ans;
    }
};



// SLIDING WINDOW TECHNIQUE

class Solution {
public:
    long long countSubarrays(vector<int>& nums, int minK, int maxK) {
        long long n = nums.size();
        long long ans = 0, notvalid = -1, minindex = -1, maxindex = -1;
        for(int i = 0; i < n; i++) {
            if(nums[i] < minK || nums[i] > maxK)
                notvalid = i;
            if(nums[i] == minK)
                minindex = i;
            if(nums[i] == maxK)
                maxindex = i;
            ans += max(0LL, min(minindex, maxindex) - notvalid);
        }
        return ans;
    }
};
