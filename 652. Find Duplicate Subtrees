// C++ CODE

class Solution {
private:
    string dfs(TreeNode* node, unordered_map<string, vector<TreeNode*>>& mpp) {
        if(!node)
            return "";
        string s = "(" + dfs(node->left, mpp) + to_string(node->val) + dfs(node->right, mpp) + ")";
        mpp[s].push_back(node);
        return s;
    }
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string, vector<TreeNode*>> mpp;
        vector<TreeNode*> ans;
        dfs(root, mpp);
        for(auto& [a, b] : mpp)
            if(b.size() > 1)
                ans.push_back(b[0]);
        return ans;
    }
};




// PYTHON3 CODE

class Solution:
    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:
        mpp = defaultdict(list)

        def dfs(node):
            if not node:
                return "null"
            s = ",".join([str(node.val), dfs(node.left), dfs(node.right)])
            if len(mpp[s]) == 1:
                ans.append(node)
            mpp[s].append(node)
            return s
        ans = []
        dfs(root)
        return ans
