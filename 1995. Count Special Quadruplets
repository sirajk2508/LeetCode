// Brute Force Solution : O(N^4)

class Solution {
public:
    int countQuadruplets(vector<int>& nums) {
        int ans = 0, n = nums.size();
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                for(int k = j+1; k < n; k++) {
                    for(int l = k+1; l < n; l++)
                        if((nums[i] + nums[j] + nums[k]) == nums[l])
                            ans++;
                }
            }
        }
        return ans;
    }
};




// Optimized Solution : O(N^3)

class Solution {
public:
    int countQuadruplets(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        unordered_map<int, int> mpp;
        reverse(nums.begin(), nums.end());
        mpp[nums[0]]++;
        for(int i = 1; i < n-2; i++) {
            for(int j = i+1; j < n-1; j++)
                for(int k = j+1; k < n; k++)
                    ans += mpp[nums[i] + nums[j] + nums[k]];
            mpp[nums[i]]++;
        }
        return ans;
    }
};
