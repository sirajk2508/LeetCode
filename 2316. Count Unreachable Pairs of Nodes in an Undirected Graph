class Solution {
private:
    typedef long long ll;

    void dfs(int node, unordered_map<int, vector<int>>& adj, ll& count, vector<int>& vis) {
        vis[node] = 1;
        count++;
        for(auto i : adj[node])
            if(!vis[i])
                dfs(i, adj, count, vis);
    }
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> adj;
        for(auto it : edges) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        ll ans = ((ll)n * (n-1) / 2);
        vector<int> vis(n, 0);
        for(int i = 0; i < n; i++) {
            if(!vis[i]) {
                ll count = 0;
                dfs(i, adj, count, vis);
                ans -= (count * (count-1) / 2);
            }
        }
        return ans;
    }
};
