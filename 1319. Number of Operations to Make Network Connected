class Solution {
private:
    void dfs(int cur, unordered_map<int, vector<int>>& adj, vector<bool>& vis) {
        vis[cur] = 1;
        for(auto i : adj[cur])
            if(!vis[i])
                dfs(i, adj, vis);
    }
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        unordered_map<int, vector<int>> adj;
        vector<bool> vis(n, 0);
        int edges = 0;
        for(auto it : connections) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
            edges++;
        }
        int components = 0;
        for(int i = 0; i < n; i++) {
            if(!vis[i]) {
                components++;
                dfs(i, adj, vis);
            }
        }
        int redundant = edges - ((n-1) - (components-1));
        if(edges < n-1)
            return -1;
        if(redundant >= (components-1))
            return components-1;
        return -1;
    }
};
