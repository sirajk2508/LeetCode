// C++ Code
/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
private:
    Node* dfs(int n, int r, int c, vector<vector<int>>& grid) {
        bool allsame = true;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[r][c] != grid[r+i][c+j]) {
                    allsame = false;
                    break;
                }
            }
        }
        if(allsame)
            return new Node(grid[r][c], true);
        n = n / 2;
        Node* node = new Node(true, false);
        node->topLeft = dfs(n, r, c, grid);
        node->topRight = dfs(n, r, c+ n, grid);
        node->bottomLeft = dfs(n, r+n, c, grid);
        node->bottomRight = dfs(n, r+n, c+n, grid);
        return node;
    }
public:
    Node* construct(vector<vector<int>>& grid) {
        int n = grid.size();
        return dfs(n, 0, 0, grid);
    }
};



// PYTHON3 Code
class Solution:
    def construct(self, grid: List[List[int]]) -> 'Node':
        def dfs(n, r, c):
            allsame = True
            for i in range(n):
                for j in range(n):
                    if grid[r][c] != grid[r+i][c+j]:
                        allsame = False
                        break
            if allsame:
                return Node(grid[r][c], True)
            n = n // 2
            topleft = dfs(n, r, c)
            topright = dfs(n, r, c+n)
            bottomleft = dfs(n, r+n, c)
            bottomright = dfs(n, r+n, c+n)
            return Node(0, False, topleft, topright, bottomleft, bottomright)
        return dfs(len(grid), 0, 0)
