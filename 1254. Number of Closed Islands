// C++ CODE

class Solution {
private:
    int dfs(int r,int c,vector<vector<int>>& grid,set<pair<int, int>>& vis,int n,int m) {
        if(r < 0 or c < 0 or c == m or r == n)
            return 0;
        if(grid[r][c] == 1 or vis.find({r, c}) != vis.end())
            return 1;
        vis.insert({r, c});
        return min(dfs(r+1, c, grid, vis, n, m), min(dfs(r-1, c, grid, vis, n, m), min(dfs(r, c+1, grid, vis, n, m), dfs(r, c-1, grid, vis, n, m))));
    }
public:
    int closedIsland(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        set<pair<int, int>> vis;
        int ans = 0;
        for(int r = 0; r < n; r++) {
            for(int c = 0; c < m; c++) {
                if(grid[r][c] == 0 && vis.find({r, c}) == vis.end())
                    ans += dfs(r, c, grid, vis, n, m);
            }
        }
        return ans;
    }
};




class Solution {
private:
    int dfs(int r,int c,vector<vector<int>>& grid,vector<vector<int>>&vis, int n, int m) {
        if(r < 0 || c < 0 || r == n || c == m)
            return 0;
        if(grid[r][c] || vis[r][c])
            return 1;
        vis[r][c] = 1;
        return min(dfs(r+1,c,grid,vis,n,m), min(dfs(r-1,c,grid,vis,n, m), min(dfs(r, c+1,grid,vis,n,m), dfs(r,c-1,grid,vis,n,m))));
    }
public:
    int closedIsland(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int ans = 0;
        for(int r = 0; r < n; r++) {
            for(int c = 0; c < m; c++) {
                if(!grid[r][c] && !vis[r][c])
                    ans += dfs(r, c, grid, vis, n, m);
            }
        }
        return ans;
    }
};




// PYTHON3 CODE

class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        n, m = len(grid), len(grid[0])
        vis = set()

        def dfs(r, c):
            if (r < 0 or c < 0 or r == n or c == m):
                return 0
            if grid[r][c] == 1 or (r, c) in vis:
                return 1
            vis.add((r, c))
            return min(dfs(r+1, c), dfs(r, c+1), dfs(r-1, c), dfs(r, c-1))

        ans = 0
        for r in range(n):
            for c in range(m):
                if not grid[r][c] and (r, c) not in vis:
                    ans += dfs(r, c)
        return ans
