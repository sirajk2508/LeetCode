// BRUTE FORCE Solution

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        int n = nums.size();
        if(n == 0 || n < k)
            return {};
        int window = n - k +1;
        for(int i = 0; i < window; i++) {
            int maxi = nums[i];
            for(int j = i+1; j < i+k; j++)
                maxi = max(maxi, nums[j]);
            ans.push_back(maxi);
        }
        return ans;
    }
};



// Optimized Solution

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        deque<int> q;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            if(!q.empty() && q.front() == i-k)
                q.pop_front();
            while(!q.empty() && nums[q.back()] <= nums[i])
                q.pop_back();
            q.push_back(i);
            if(i >= k-1)
                ans.push_back(nums[q.front()]);
        }
        return ans;
    }
};
