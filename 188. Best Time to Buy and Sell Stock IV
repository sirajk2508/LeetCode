// Brute Force Approach : Recursion - Gives TLE

class Solution {
private:
    int solve(int ind, int buy, int k, vector<int>& prices) {
        if(ind == prices.size() || k == 0)
            return 0;
        int profit = 0;
        if(buy == 1)
            profit = max(-prices[ind] + solve(ind+1, 0, k, prices), solve(ind+1, 1, k, prices));
        else profit = max(prices[ind] + solve(ind+1, 1, k-1, prices), solve(ind+1, 0, k, prices));
        return profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) {
        return solve(0, 1, k, prices);
    }
};




// Dynamic Programming - MEMOIZATION

class Solution {
private:
    int solve(int ind, int buy, int k, vector<int>& prices, vector<vector<vector<int>>>& dp) {
        if(ind == prices.size() || k == 0)
            return 0;
        int profit = 0;
        if(dp[ind][buy][k] != -1)
            return dp[ind][buy][k];
        if(buy == 1)
            profit = max(-prices[ind] + solve(ind+1, 0, k, prices, dp), solve(ind+1, 1, k, prices, dp));
        else profit = max(prices[ind] + solve(ind+1, 1, k-1, prices, dp), solve(ind+1, 0, k, prices, dp));
        return dp[ind][buy][k] = profit;
    }
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(k+1, -1)));
        return solve(0, 1, k, prices, dp);
    }
};
