class Solution {
public:
    int secondHighest(string s) {
        priority_queue<int> pq;
        set<int> st;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] >= '0' && s[i] <= '9')
                st.insert(s[i]-'0');
        }
        if(st.size() == 1 || st.size() == 0)
            return -1;
        for(auto i : st)
            pq.push(i);
        pq.pop();
        return pq.top();
    }
};


class Solution {
public:
    int secondHighest(string s) {
        int max1 = -1, max2 = -1;
        for(char c : s) {
            if(isdigit(c)) {
                int num = c-'0';
                if(num > max1) {
                    max2 = max1;
                    max1 = num;
                }
                else if(num > max2 && num < max1)
                    max2 = num;
            }
        }
        return max2;
    }
};


class Solution {
public:
    int secondHighest(string s) {
        map<int, int> mpp;
        for(char c : s)
            if(isdigit(c))
                mpp[c-'0'] = 1;
        if(mpp.empty())
            return -1;
        auto it = rbegin(mpp);
        it++;
        return it == mpp.rend() ? -1 : it->first;
    }
};



class Solution {
public:
    int secondHighest(string s) {
        set<int> st;
        for(char c : s)
            if(isdigit(c))
                st.insert(c-'0');
        if(st.empty())
            return -1;
        auto it = rbegin(st);
        it++;
        return it == rend(st) ? -1 : *it;
    }
};
