// Naive Approach

class Solution {
public:
    int minimumAverageDifference(vector<int>& nums) {
        int n = nums.size();
        int ans = -1;
        int mini = INT_MAX;
        int diff = 0;
        for(int index = 0; index < n; index++) {
            long long left = 0, right = 0;
            for(int i = 0; i <= index; i++)
                left += nums[i];
            left /= (index+1);
            for(int j = index+1; j < n; j++)
                right += nums[j];
            if(index != n-1)
                right /= (n-index-1);
            diff = int(abs(left - right));
            if(diff < mini) {
                mini = diff;
                ans = index;
            }
        }
        return ans;
    }
};



// Optimal Solution

class Solution {
public:
    int minimumAverageDifference(vector<int>& nums) {
        int n = nums.size();
        int ans = -1;
        int diff = 0;
        int mini = INT_MAX;
        vector<long long> prefix(n+1), suffix(n+1);
        for(int i = 0; i < n; i++)
            prefix[i+1] = prefix[i] + nums[i];
        for(int i = n-1; i >= 0; i--)
            suffix[i] = suffix[i+1] + nums[i];
        for(int index = 0; index < n; index++) {
            long long left = 0, right = 0;
            left += prefix[index+1];
            left /= (index+1);
            right += suffix[index+1];
            if(index != n-1)
                right /= (n - index - 1);
            diff = int(abs(left - right));
            if(diff < mini) {
                mini = diff;
                ans = index;
            }
        }
        return ans;
    }
};
