// TC : O(n^2) : BUBBLE SORT

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                if(nums[i] > nums[j])
                    swap(nums[i], nums[j]);
            }
        }
        return nums;
    }
};



// TC : O(n log(n)) : MERGE SORT

class Solution {
private:
    void merge(vector<int>& nums, int left, int mid, int right) {
        vector<int> temp;
        int i = left, j = mid+1;
        while(i <= mid && j <= right) {
            if(nums[i] <= nums[j])
                temp.push_back(nums[i++]);
            else temp.push_back(nums[j++]);
        }
        while(i <= mid)
            temp.push_back(nums[i++]);
        while(j <= right)
            temp.push_back(nums[j++]);
        for(int k = left; k <= right; k++)
            nums[k] = temp[k-left];
    }

    void mergeSort(vector<int>& nums, int left, int right) {
        if(left >= right)
            return;
        int mid = left + (right - left) / 2;
        mergeSort(nums, left, mid);
        mergeSort(nums, mid+1, right);
        merge(nums, left, mid, right);
    }
public:
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size();
        mergeSort(nums, 0, n-1);
        return nums;
    }
};
