// DFS Solution

class Solution {
private:
    int dfs(TreeNode* root, int sum) {
        if(!root)
            return 0;
        sum = sum * 10 + root->val;
        if(!root->left && !root->right)
            return sum;
        return dfs(root->left, sum) + dfs(root->right, sum);
    }
public:
    int sumNumbers(TreeNode* root) {
        return dfs(root, 0);
    }
};



// BFS Solution

class Solution {
public:
    int sumNumbers(TreeNode* root) {
        int sum = 0;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        while(q.size()) {
            auto [node, cur] = q.front();
            q.pop();
            cur = cur * 10 + node->val;
            if(node->left)
                q.push({node->left, cur});
            if(node->right)
                q.push({node->right, cur});
            if(!node->left && !node->right)
                sum += cur;
        }
        return sum;
    }
};
