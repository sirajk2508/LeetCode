class Solution {
private:
    int dfs(int i, int j, vector<vector<int>>& grid, int n, int m) {
        if(i >= n)
            return j;
        if(grid[i][j] == 1 and j+1 < m and grid[i][j+1] == 1)
            return dfs(i+1, j+1, grid, n, m);
        else if(grid[i][j] == -1 and j-1 >= 0 and grid[i][j-1] == -1)
            return dfs(i+1, j-1, grid, n, m);
        else if(grid[i][j] == 1 and j+1 >= m)
            return -1;
        else return -1;
    }
public:
    vector<int> findBall(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<int> ans(m);
        for(int j = 0; j < m; j++)
            ans[j] = dfs(0, j, grid, n, m);
        return ans;
    }
};
