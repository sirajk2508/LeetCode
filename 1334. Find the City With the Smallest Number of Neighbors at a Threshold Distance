// FLOYD WARSHALL's ALGORITHM

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        for(auto it : edges) {
            dist[it[0]][it[1]] = it[2];
            dist[it[1]][it[0]] = it[2];
        }
        for(int i = 0; i < n; i++)
            dist[i][i] = 0;
        for(int k = 0; k < n; k++) {
            for(int i = 0; i < n; i++) {
                for(int j = 0; j < n; j++) {
                    if(dist[i][k] == INT_MAX || dist[k][j] == INT_MAX)
                        continue;
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
        int reachable = n, city = -1;
        for(int i = 0; i < n; i++) {
            int cnt = 0;
            for(int j = 0; j < n; j++)
                if(dist[i][j] <= distanceThreshold)
                    cnt++;
            if(cnt <= reachable) {
                reachable = cnt;
                city = i;
            }
        }
        return city;
    }
};



// DIJKSTRA's ALGORITHM

class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<pair<int, int>> adj[n];
        for(auto it : edges) {
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int cityno = -1, reachable = n;
        for(int i = 0; i < n; i++) {
            vector<int> dist(n, 1e9);
            pq.push({0, i});
            dist[i] = 0;
            while(!pq.empty()) {
                int distance = pq.top().first;
                int node = pq.top().second;
                pq.pop();
                for(auto it : adj[node]) {
                    int adjnode = it.first;
                    int adjweight = it.second;
                    if(distance + adjweight < dist[adjnode]) {
                        dist[adjnode] = distance + adjweight;
                        pq.push({dist[adjnode], adjnode});
                    }
                }
            }
            int count = 0;
            for(int j = 0; j < n; j++) {
                if(dist[j] <= distanceThreshold)
                    count++;
            }
            if(count <= reachable) {
                reachable = count;
                cityno = i;
            }
        }
        return cityno;
    }
};
