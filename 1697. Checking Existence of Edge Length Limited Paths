class DisjointSet {
public:
    vector<int> size, parent;
    DisjointSet(int n) {
        size.resize(n, 1);
        parent.resize(n);
        for(int i = 0; i < n; i++)
            parent[i] = i;
    }
    int findparent(int node) {
        if(node == parent[node])
            return node;
        return parent[node] = findparent(parent[node]);
    }
    void UnionBySize(int u, int v) {
        int up = findparent(u);
        int vp = findparent(v);
        if(up == vp)
            return;
        if(size[up] < size[vp]) {
            parent[up] = vp;
            size[vp] += size[up]; 
        }
        else {
            parent[vp] = up;
            size[up] += size[vp];
        }
    }
};

class Solution {
public:
    static bool comp(vector<int>& a, vector<int>& b) {
        return a[2] < b[2];
    }
    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edgeList, vector<vector<int>>& queries) {
        DisjointSet ds(n);
        for(int i = 0; i < queries.size(); i++)
            queries[i].push_back(i);
        vector<bool> ans(queries.size(), false);
        sort(queries.begin(), queries.end(), comp);
        sort(edgeList.begin(), edgeList.end(), comp);
        int j = 0;
        for(int i = 0; i < queries.size(); i++) {
            while(j < edgeList.size() && edgeList[j][2] < queries[i][2]) {
                ds.UnionBySize(edgeList[j][0], edgeList[j][1]);
                j++;
            }
            if(ds.findparent(queries[i][0]) == ds.findparent(queries[i][1]))
                ans[queries[i][3]] = true;
        }
        return ans;
    }
};
