class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        int n = arr.size();
        int left = 0, right = 1;
        int ans = 1;
        string prev = "";
        while(right < n) {
            if(arr[right-1] > arr[right] && prev != ">") {
                ans = max(ans, right - left + 1);
                right++;
                prev = ">";
            }
            else if(arr[right-1] < arr[right] && prev != "<") {
                ans = max(ans, right - left + 1);
                right++;
                prev = "<";
            }
            else {
                if(arr[right-1] == arr[right])
                    right++;
                else right;
                left = right - 1;
                prev = "";
            }
        }
        return ans;
    }
};



// PYTHON3 Code

class Solution:
    def maxTurbulenceSize(self, arr: List[int]) -> int:
        left, right = 0, 1
        ans, prev = 1, ""
        while right < len(arr):
            if arr[right-1] > arr[right] and prev != ">":
                ans = max(ans, right - left + 1)
                right += 1
                prev = ">"
            elif arr[right-1] < arr[right] and prev != "<":
                ans = max(ans, right - left + 1)
                right += 1
                prev = "<"
            else:
                right = right+1 if arr[right-1] == arr[right] else right
                left = right - 1
                prev = ""
        return ans
