// C++ CODE

class Solution {
private:
    bool isPalindrome(string s, int start, int end) {
        while(start <= end) {
            if(s[start] != s[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
    void dfs(int index, string s, vector<string>& path, vector<vector<string>>& ans) {
        if(index == s.size()) {
            ans.push_back(path);
            return;
        }
        for(int i = index; i < s.size(); i++) {
            if(isPalindrome(s, index, i)) {
                path.push_back(s.substr(index, i - index +1));
                dfs(i+1, s, path, ans);
                path.pop_back();
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> path;
        if(s.empty())
            return ans;
        dfs(0, s, path, ans);
        return ans;
    }
};




// PYTHON CODE

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        ans = []
        path = []

        def dfs(i):
            if i >= len(s):
                ans.append(path.copy())
                return
            for j in range(i, len(s)):
                if self.isPalindrome(s, i, j):
                    path.append(s[i:j+1])
                    dfs(j+1)
                    path.pop()
        dfs(0)
        return ans
    
    def isPalindrome(self, s, l, r):
        while l < r:
            if s[l] != s[r]:
                return False
            l, r = l+1, r-1
        return True
