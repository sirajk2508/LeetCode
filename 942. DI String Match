// Solution 1


class Solution {
public:
    vector<int> diStringMatch(string s) {
        int n = s.length(), low = 0, high = n;
        vector<int> ans(n+1);
        for(int i = 0; i < n; i++) {
            if(s[i] == 'I')
                ans[i] = low++;
            else ans[i] = high--;
        }
        ans[n] = low;
        return ans;
    }
};







// Solution 2


class Solution {
public:
    vector<int> diStringMatch(string s) {
        int left = count(s.begin(), s.end(), 'D'), right = left;
        vector<int> ans = {left};
        for(auto c : s) {
            if(c == 'I')
                ans.push_back(++right);
            else ans.push_back(--left);
        }
        return ans;
    }
};
