class Solution {
public:
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        unordered_map<string, vector<string>> mpp;
        for(auto path : paths) {
            stringstream ss(path);
            string dir, file;
            getline(ss, dir, ' ');
            while(getline(ss, file, ' ')) {
                string content = file.substr(file.find('(') + 1, file.find(')') - file.find('(')-1);
                string name = dir + '/' + file.substr(0, file.find('('));
                mpp[content].push_back(name);
            }
        }
        vector<vector<string>> ans;
        for(auto&[one, two] : mpp)
            if(two.size() > 1)
                ans.push_back(two);
        return ans;
    }
};
