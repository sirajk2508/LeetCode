// RECURSIVE CODE

class Solution {
public:
    const int inf = 1e9;

    int solve(int ind, int k, vector<vector<int>>& piles) {
        if(k == 0)
            return 0;
        if(ind == piles.size()) {
            if(k == 0)
                return 0;
            return -inf;
        }
        int ans = -inf;
        for(int i = 0; i < min(k, (int)piles[ind].size()); i++)
            ans = max(ans, piles[ind][i] + solve(ind+1, k - (i+1), piles));
        return max(ans, solve(ind+1, k, piles));
    }

    int maxValueOfCoins(vector<vector<int>>& piles, int k) {
        int n = piles.size();
        for(int i = 0; i < n; i++)
            for(int j = 1; j < piles[i].size(); j++)
                piles[i][j] += piles[i][j-1];
        return solve(0, k, piles);
    }
};


// MEMOIZATION

class Solution {
public:
    const int inf = 1e9;
    int dp[1001][2001];

    int solve(int ind, int k, vector<vector<int>>& piles) {
        if(k == 0)
            return 0;
        if(ind == piles.size()) {
            if(k == 0)
                return 0;
            return -inf;
        }
        if(dp[ind][k] != -1)
            return dp[ind][k];
        int ans = -inf;
        for(int i = 0; i < min(k, (int)piles[ind].size()); i++)
            ans = max(ans, piles[ind][i] + solve(ind+1, k - (i+1), piles));
        return dp[ind][k] = max(ans, solve(ind+1, k, piles));
    }

    int maxValueOfCoins(vector<vector<int>>& piles, int k) {
        int n = piles.size();
        memset(dp, -1, sizeof(dp));
        for(int i = 0; i < n; i++)
            for(int j = 1; j < piles[i].size(); j++)
                piles[i][j] += piles[i][j-1];
        return solve(0, k, piles);
    }
};
